---
name: Run CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    paths-ignore:
      - 'README.md'
  workflow_dispatch:  # Allows to trigger the workflow manually in GitHub UI

# If another push to the same PR or branch happens while this workflow is still running,
# cancel the earlier run in favor of the next run.
#
# There's no point in testing an outdated version of the code. GitHub only allows
# a limited number of job runners to be active at the same time, so it's better to cancel
# pointless jobs early so that more useful jobs can run sooner.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  POETRY_VERSION: "1.5.1"
  WORKDIR: "."

jobs:
  lint:
    uses:
      ./.github/workflows/_lint.yml
    with:
      working-directory: .
    secrets: inherit

  pydantic-compatibility:
    uses:
      ./.github/workflows/_pydantic_compatibility.yml
    with:
      working-directory: .
    secrets: inherit
  test:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    name: Python ${{ matrix.python-version }} tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: .
          cache-key: benchmarks-all

      - name: Install dependencies
        shell: bash
        run: |
          echo "Running tests, installing dependencies with poetry..."
          poetry install --with test,lint,typing,docs

      - name: Run tests
        run: make test

      - name: Ensure the tests did not create any additional files
        shell: bash
        run: |
          set -eu

          STATUS="$(git status)"
          echo "$STATUS"

          # grep will exit non-zero if the target message isn't found,
          # and `set -e` above will cause the step to fail.
          echo "$STATUS" | grep 'nothing to commit, working tree clean'
  test_docs:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    strategy:
      matrix:
        python-version:
          - "3.11"
    name: Documentation Build for Python ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: .
          cache-key: benchmarks-all

      - name: Install dependencies
        shell: bash
        run: |
          echo "Running tests, installing dependencies with poetry..."
          poetry install --with test,lint,typing,docs

      - name: Test Sphinx Docs
        shell: bash
        run: |
          echo "Attempting to build docs..."
          make build_docs
  test_datasets:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKDIR }}
    strategy:
      matrix:
        python-version:
          - "3.11"
    name: Validate Public Datasets
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }} + Poetry ${{ env.POETRY_VERSION }}
        uses: "./.github/actions/poetry_setup"
        with:
          python-version: ${{ matrix.python-version }}
          poetry-version: ${{ env.POETRY_VERSION }}
          working-directory: .
          cache-key: benchmarks-all

      - name: Install dependencies
        shell: bash
        run: |
          echo "Running tests, installing dependencies with poetry..."
          poetry install --with test,lint,typing,docs

      - name: Request datasets
        shell: bash
        run: |
          echo "Attempting to build docs..."
          poetry run python -m scripts.check_datasets